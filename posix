#!/usr/bin/env bash

POSIX_PATH=$(realpath "$0")
POSIX_HOME=$(dirname "$POSIX_PATH")
echo $POSIX_PATH
echo $POSIX_HOME
cd $POSIX_HOME
os=`uname -a`
uname -a

# Configure
[[ -d ~/.local/bin ]] || mkdir -p ~/.local/bin
[[ -L ~/.local/bin/posix  ]] || ln -s ~/posix/posix ~/.local/bin/posix

install_base() {
    echo "** Installing base software"

    apps=(
        bat
        curl
        fzf
        git
        htop
        jq
        lnav
        powerline
        net-tools
        rsync
        stow
        sudo
        terminator
        tldr
        tmux
        tmuxinator
        tree
        wget
        zoxide
    )
    if [[ -z $DISPLAY ]]; then
        apps+=(
            vim-nox
        )
    else
        apps+=(
            gitk 
            git-gui
            vim-gtk3
            xclip
        )
    fi

    for app in ${apps[@]}; do
        echo "[+] Installing $app"
        sudo apt-get install -qqy $app
    done

    ln -s /usr/bin/batcat ~/.local/bin/bat
}

install_conf() {
    git pull
    cp -vrT etc ~
    # [ -L ~/s ] || ln -s ~/scripts ~/s
}

install_config() {
    echo -e "\n#\n# Installing config files\n#\n"

    git pull

    SRC=$(realpath etc)
    DST=$HOME

    rm -fr $DST/scripts
    rm -fr $DST/.tmuxinator

    re="s|^$SRC/||"
    find $SRC -type f | sed "$re" | while read -r file; do
        if [[ -f $DST/$file ]] && [[ ! -L $DST/$file ]]; then
            echo "[+] Backing up: $DST/$file"
            echo -n "  "
            mv -v "$DST/$file" "$DST/$file.bak"
        fi
    done

    stow -d $SRC -t $DST .
    echo
    echo "[+] Configuration Deployed"

}

install_dev() {
    echo "\n#\n# Installing development packages\n#"
    sudo apt-get -y install csstidy
    sudo apt-get -y install tidy
}

install_fonts() {
    # Powerline fonts
    sudo apt-get -y install fonts-powerline
    git clone https://github.com/powerline/fonts.git ~/fonts --depth=1
    ~/fonts/install.sh
    rm -fr ~/fonts
    # Nerd Font
    wget https://github.com/ryanoasis/nerd-fonts/releases/latest/download/FiraCode.zip
    sudo unzip FiraCode.zip -d /usr/local/share/fonts
    rm FiraCode.zip
    fc-cache -fv
}

install_kali(){
    echo -e "#\n# Installing Kali Tools\n#\n\n"
    plugins/docker
    plugins/kalitools
    plugins/syncthing
}

install_net() {
    echo "\n#\n#  Installing network packages\n#"
    sudo apt-get -y install kismet
    sudo apt-get -y install nmap
    if [[ -n $DISPLAY ]]; then
        sudo apt-get -y install zenmap
        sudo apt-get -y install wireshark
    fi
}

install_vmware() {
    echo -e "#\n# Installing vmware tools\n#\n\n"
    sudo apt-get -y install open-vm-tools
    if [[ -n $DISPLAY ]]; then
        sudo apt-get -y install open-vm-tools-desktop
    fi
}

init() {
    echo -e "#\n# Initializing base system\n#\n\n"
    sudo apt update
    install_base
    plugins/vim
    plugins/zsh
    plugins/omp
    if [[ -n $DISPLAY ]]; then
        install_fonts
    fi
    install_config
}

sync(){
    echo -e "\n#\n# Sync Config\n#\n"
    rsync -vrR --files-from=sync.list --exclude=.git ~/ $POSIX_HOME/etc/
}

plugins() {
    [[ -f "plugins/$1" ]] && . plugins/$1
}

# PROCESS ARGUMENTS
 usage() {
    echo "USAGE posix [options]
    Options
    =======
    base    : Install base packages
    config  : Install configuration files
    dev     : Install development packages
    fonts   : Install fonts
    init    : Initialize from clean install
    net     : Install network tools
    vmware  : Install vmware tools

    PLUGINS
    =======
    chrome : Install Chrome web browser
    docker : Install Docker
    kali   : Install kali stuff
    samba  : Install + Configure Samba Server
    sync   : Sync local settings to repo
    tmux   : Build TMUX from source
    vim    : Install + Configure VIM
    zsh    : Install oh-my-zsh"

    ls plugins
}

[ $# == 0 ] && usage
for arg in $@
do
    case $arg in
        "base"        ) install_base;;
        "config"      ) install_config;;
        "conf"        ) install_conf;;
        "dev"         ) install_dev;;
        "fonts"       ) install_fonts;;
        "init"        ) init;;
        "sync"        ) sync;;
        "kali"        ) install_kali;;
        "net"         ) install_net;;
        "vmware"      ) install_vmware;;
        *             ) plugins $arg;;
    esac
done

