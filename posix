#!/usr/bin/env bash

POSIX_PATH=$(realpath "$0")
POSIX_HOME=$(dirname "$POSIX_PATH")
cd "$POSIX_HOME" || exit
lsb_release -sa 2>/dev/null

. /etc/os-release

git pull

# Configure
[[ -d ~/.local/bin ]] || mkdir -p ~/.local/bin
[[ -L ~/.local/bin/posix ]] || ln -s ~/posix/posix ~/.local/bin/posix

install_base() {
  echo -e "\n### Installing base software\n"

  apps=(
    bat
    btop
    curl
    fzf
    git
    htop
    jq
    lnav
    net-tools
    powerline
    ripgrep
    rsync
    stow
    sudo
    tldr
    tmux
    tmuxinator
    tree
    wget
    zoxide
  )

  # Check if gui environment
  if [[ -z $DISPLAY ]]; then
    apps+=(
      vim-nox
    )
  else
    apps+=(
      git-gui
      gitk
      kitty
      terminator
      vim-gtk3
      xclip
    )
  fi

  for app in "${apps[@]}"; do
    echo "[+] Installing $app"
    sudo apt-get install -qqy "$app"
  done

  # Distro specific
  case "$ID" in
  "kali" | "linuxmint")
    echo "[+] Installing distro specific packages"
    ;;
  esac

  ln -s /usr/bin/batcat ~/.local/bin/bat
}

install_config() {
  echo -e "\n### Installing config files\n"

  SRC=$(realpath etc)

  # Cleanup existing

  rm -fr $HOME/.config/kitty
  rm -fr $HOME/.config/nvim
  rm -fr $HOME/.config/terminator
  rm -fr $HOME/.tmuxinator
  rm -fr $HOME/scripts

  mkdir -p $HOME/.ssh
  mkdir -p $HOME/.config

  echo "[+] Backing up existing config"
  re="s|^$SRC/|$HOME/|"
  find $SRC -type f | sed "$re" | while read -r file; do
    temp="$file"
    linked=false
    while [ -n "$temp" ] && [ "$temp" != "$HOME" ]; do
      if [ -L "$temp" ]; then
        linked=true
      fi
      temp=$(dirname "$temp")
    done

    if [[ -f $file ]] && [[ ! -L $file ]] && [[ $linked == false ]]; then
      echo "[+] Backing up: $file"
      echo -n "  "
      mv -v "$file" "$file.bak"
    fi
  done

  echo "[+] Symlinking config files"
  stow -v -d $SRC -t $HOME .

  # Distro specific settings
  echo "[+] Deploying distro specific settings"
  case $ID in
  "kali")
    gsettings set org.gnome.desktop.interface monospace-font-name 'FiraCode Nerd Font Mono 11'
    sed -i "s/TerminalEmulator=.*/TerminalEmulator=terminator/g" .config/xfce4/helpers.rc
    ;;
  "linuxmint")
    gsettings set org.cinnamon.desktop.default-applications.terminal exec 'terminator'
    gsettings set org.cinnamon.desktop.default-applications.terminal exec-arg ''
    gsettings set org.gnome.desktop.interface monospace-font-name 'FiraCode Nerd Font Mono 11'
    ;;
  esac

}

install_fonts() {
  # Powerline fonts
  sudo apt-get -y install fonts-powerline
  git clone https://github.com/powerline/fonts.git ~/fonts --depth=1
  ~/fonts/install.sh
  rm -fr ~/fonts
  # Nerd Font
  wget https://github.com/ryanoasis/nerd-fonts/releases/latest/download/FiraCode.zip
  sudo unzip FiraCode.zip -d /usr/local/share/fonts
  rm FiraCode.zip
  fc-cache -fv
}

install_kali() {
  echo -e "\n### Installing Kali Tools\n"
  plugins/docker
  plugins/kalitools
  plugins/syncthing
}

install_net() {
  echo -e "\n### Installing network packages\n"
  sudo apt-get -y install kismet
  sudo apt-get -y install nmap
  if [[ -n $DISPLAY ]]; then
    sudo apt-get -y install zenmap
    sudo apt-get -y install wireshark
  fi
}

install_vmware() {
  echo -e "\n#### Installing vmware tools\n"
  sudo apt-get -y install open-vm-tools
  if [[ -n $DISPLAY ]]; then
    sudo apt-get -y install open-vm-tools-desktop
  fi
}

init() {
  echo -e "\n### Initializing base system\n"
  sudo apt update
  install_base
  plugins/vim
  plugins/zsh
  plugins/omp
  if [[ -n $DISPLAY ]]; then
    install_fonts
  fi
  install_config
}

sync() {
  echo -e "\n### Sync Config\n"
  rsync -vrR --files-from=sync.list --exclude=.git ~/ $POSIX_HOME/etc/
}

plugins() {
  [[ -f "plugins/$1" ]] && . plugins/$1
}

# PROCESS ARGUMENTS
usage() {
  cat <<EOF

USAGE posix [options]

OPTIONS
=======
base    : Install base packages
config  : Install configuration files
fonts   : Install fonts
init    : Initialize from clean install
net     : Install network tools
vmware  : Install vmware tools

PLUGINS
=======
EOF

  ls plugins
}

[ $# == 0 ] && usage
for arg in "$@"; do
  case $arg in
  "base") install_base ;;
  "config") install_config ;;
  "conf") install_conf ;;
  "dev") install_dev ;;
  "fonts") install_fonts ;;
  "init") init ;;
  "sync") sync ;;
  "kali") install_kali ;;
  "net") install_net ;;
  "vmware") install_vmware ;;
  *) plugins "$arg" ;;
  esac
done
